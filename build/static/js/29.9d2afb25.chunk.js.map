{"version":3,"sources":["components/new/CardWraper/index.jsx","components/new/PageWraper/index.jsx","containers/admins/config.js","containers/admins/add.jsx"],"names":["CardWraper","Styled","div","PageWraper","styled","pages","index","add","edit","show","config","api","method","params","delete","routes","privateSub","path","indexTitle","replace","indexKey","slice","length","titles","isActive","1","0","Option","cancleButton","Dragger","background","color","padding","border","marginLeft","NewCountry","props","useState","isSubmiting","setSubmiting","history","useHistory","cat","setCat","useParams","id","loading","setLoading","roles","setRoles","uplodedList","dispatch","useDispatch","localStorage","getItem","useEffect","type","payload","key","to","title","enstance","get","headers","then","res","data","useForm","form","className","span","style","marginTop","layout","name","onFinish","values","password_confirmation","password","console","log","formData","FormData","append","map","e","toast","promise","pending","success","render","push","message","icon","error","err","response","initialValues","is_active","scrollToFirstError","autoComplete","Item","label","rules","required","whitespace","size","hasFeedback","Password","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","translate","mode","placeholder","display","textAlign","styles","handleClick"],"mappings":"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","file":"static/js/29.9d2afb25.chunk.js","sourcesContent":["import Styled from \"styled-components\";\n\nconst CardWraper = Styled.div`\n    width: 100%;\n    box-shadow: 0px 2px 6px #0000000A;\n    border-radius: 13px;\n    background: #FFFFFF 0% 0% no-repeat padding-box; \n    padding : 1rem 2rem;\n    height: 100%;\n \n    overflow: hidden ;\n`;\nexport default CardWraper;\n","import styled from \"styled-components\";\n\nconst PageWraper = styled.div`\n  padding: 1rem;\n`;\n\nexport default PageWraper;\n","import { routes } from \"../Dashboard/DashboardRoutes\";\nimport { privateSub } from \"../../router\";\n\nconst pages = {\n  index: \"admins\",\n  add: \"adminsNew\",\n  edit: \"adminsEdit\",\n  show: \"adminsShow\",\n};\nconst config = {\n  api: {\n    index: [{ method: \"get\", params: {} }, \"users\"],\n    add: [{ method: \"post\", params: {} }, \"users\"],\n    edit: [{ method: \"put\", params: {} }, \"users/\"],\n    show: [{ method: \"get\", params: {} }, \"users/\"],\n    delete: [{ method: \"delete\", params: {} }, \"users/\"],\n  },\n  routes: {\n    index: `${privateSub}/${routes[pages.index]?.path}`,\n    indexTitle: pages.index.replace(/([a-z])([A-Z])/g, \"$1 $2\"),\n    indexKey: \"home\",\n    add: `${privateSub}/${routes[pages.add]?.path}`,\n    edit: `${privateSub}/${routes[pages.edit]?.path.slice(\n      0,\n      routes[pages.edit].path.length - 3\n    )}`,\n    show: `${privateSub}/${routes[pages.show]?.path.slice(\n      0,\n      routes[pages.show]?.path.length - 3\n    )}`,\n  },\n  titles: {\n    add: \"Create\",\n    edit: \"global.edit\",\n    show: \"Details\",\n  },\n};\nexport const isActive = {\n  1: \"active\",\n  0: \"not active\",\n};\nexport default config;\n","import React, { useState, useEffect } from \"react\";\nimport \"@ant-design/compatible/assets/index.css\";\nimport { Select, Row, Input, Col, Form,Image,Upload } from \"antd\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport CardWraper from \"../../components/new/CardWraper\";\nimport PageWraper from \"../../components/new/PageWraper\";\nimport CustomButton from \"../../components/new/CustomButton\";\nimport Loader from \"../../components/new/loader\";\nimport enstance from \"../../library/helpers/axios\";\nimport { useDispatch } from \"react-redux\";\nimport IntlMessages from \"@iso/components/utility/intlMessages\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport config from \"./config\";\nimport { toast } from \"react-toastify\";\nconst { Option } = Select;\nconst { Dragger } = Upload;\n\nconst NewCountry = (props) => {\n  const [isSubmiting, setSubmiting] = useState(false);\n  const history = useHistory();\n  const [cat, setCat] = useState(null);\n  const params = useParams();\n\n  const [loading, setLoading] = useState(params?.id);\n  const [roles, setRoles] = useState(false);\n  const [uplodedList, setUplodedList] = useState([]);\n  \n  const dispatch = useDispatch();\n\n  const getLang = localStorage.getItem(\"lang\");\n  useEffect(() => {\n    dispatch({\n      type: \"SET\",\n      payload: [\n        {\n          key: config.routes.indexKey,\n          to: config.routes.index,\n          title: config.routes.indexTitle,\n        },\n        {\n          key: params.id ? config.titles.edit : config.titles.add,\n          to: params.id ? `${config.routes.edit}${params.id}` : config.routes.add,\n          title: params.id ? config.titles.edit : config.titles.add,\n        },\n      ],\n    });\n    enstance\n      .get(`roles`, {\n        headers: {},\n      })\n      .then((res) => {\n        setRoles(res.data.data);\n      });\n  }, []);\n  useEffect(() => {\n    if (params.id) {\n      enstance[config?.api?.show?.[0]?.method](\n        `${config?.api?.show?.[1]}${params.id}`,\n        {\n          headers: {},\n        }\n      ).then((res) => {\n        setCat(res.data.data);\n        setLoading(false);\n\n      });\n    }\n    \n  }, []);\n\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    if(params?.id&&!values.password_confirmation){\n      delete values.password_confirmation\n    }\n    if(params?.id&&!values.password){\n      delete values.password\n    }\n    console.log(\"Received values of form: \", values);\n    setSubmiting(true);\n\n    const formData = new FormData();\n    if(params?.id){\n    // formData.append(\"_method\", \"PUT\");\n    }\n    if (uplodedList[0]) {\n      formData.append(\"image\", uplodedList[0]);\n    }\n    values.roles.map(e=>formData.append('roles[]',e))\ndelete values.roles\n    for (let key in values) {\n      formData.append(key, values[key]);\n    }\n\n\n\n    toast.promise(\n      enstance[\n        cat ? config?.api?.edit?.[0]?.method : config?.api?.add?.[0]?.method\n      ](\n        cat ? `${config?.api?.edit?.[1]}${params?.id}` : config?.api?.add?.[1],\n        formData,\n        {\n          headers: {},\n        }\n      ),\n      {\n        pending: \"Pending\",\n        success: {\n          render(res) {\n            setSubmiting(false);\n            history.push(config.routes.index);\n            return `👌 ${res.data.data.message}`;\n          },\n          // other options\n          icon: \"🟢\",\n        },\n        error: {\n          render(err) {\n            setSubmiting(false);\n            return `🤯 ${\n              err?.data?.response?.data?.message || \"Backend Error Occured\"\n            }`;\n          },\n          // other options\n          //    icon: \"🟢\",\n        },\n      }\n    );\n  };\n \n\n  return (\n    <PageWraper>\n      <div className=\"new_user_container\">\n        <Row>\n          <Col span={24} style={{ marginTop: \"1rem\" }}>\n            <CardWraper>\n              {loading ? (\n                <Loader />\n              ) : (\n                <Row>\n                  <Col span={24}>\n               <Form\n                      form={form}\n                      layout=\"vertical\"\n                      name=\"register\"\n                      onFinish={onFinish}\n                      initialValues={params ?{...cat,roles:cat?.roles?.map(e=>+e.id)}: { is_active: 1 }  }\n                      scrollToFirstError\n                      autoComplete={false}\n                    >\n                      <Form.Item\n                        name=\"name\"\n                        label=\"name\"\n                      //  tooltip=\"What do you want others to call you?\"\n                        rules={[\n                          {\n                            required: !params,\n                            message: \"Please input your name!\",\n                            whitespace: true,\n                          },\n                        ]}\n                      >\n                        <Input size=\"large\" />\n                      </Form.Item>\n                      <Form.Item\n                        name=\"email\"\n                        label=\"E-mail\"\n                        rules={[\n                          {\n                            type: \"email\",\n                            message: \"The input is not valid E-mail!\",\n                          },\n                          {\n                            required: !params,\n                            message: \"Please input your E-mail!\",\n                          },\n                        ]}\n                      >\n                         <Input size=\"large\" />\n                      </Form.Item>\n                 \n                      <Form.Item\n                        name=\"password\"\n                        label=\"Password\"\n                        rules={[\n                          {\n                            required: !params,\n                            message: \"Please input your password!\",\n                          },\n                        ]}\n                        hasFeedback\n                      >\n                        <Input.Password size=\"large\"  />\n                      </Form.Item>\n\n                      <Form.Item\n                        name=\"password_confirmation\"\n                        label=\"Confirm Password\"\n                        dependencies={[\"password\"]}\n                        hasFeedback\n                        rules={[\n                          {\n                            required: !params,\n                            message: \"Please confirm your password!\",\n                          },\n                          ({ getFieldValue }) => ({\n                            validator(_, value) {\n                              if (\n                                !value ||\n                                getFieldValue(\"password\") === value\n                              ) {\n                                return Promise.resolve();\n                              }\n\n                              return Promise.reject(\n                                new Error(\n                                  \"The two passwords that you entered do not match!\"\n                                )\n                              );\n                            },\n                          }),\n                        ]}\n                      >\n                        <Input.Password size=\"large\" />\n                      </Form.Item>\n                      <Form.Item\n                        name=\"roles\"\n                        label={\"roles\".translate()}\n                        rules={[\n                          {\n                            required: !params,\n                            message: \"Please select a role!\",\n                          },\n                        ]}\n                      >\n                        <Select mode=\"multiple\" size=\"large\" placeholder=\"select a role\">\n                          {roles&&roles?.map(({ id, name }) => (\n                            <Option value={+id}>{name}</Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n\n\n\n\n                      {/* <Dragger\n                        beforeUpload={(file) => {\n                          setUplodedList([file]);\n                          return false;\n                        }}\n                        fileList={uplodedList}\n                        multiple={false}\n                        listType=\"picture-card\"\n                        // onPreview={handlePreview}\n                        progress={{\n                          strokeColor: {\n                            \"0%\": \"#108ee9\",\n                            \"100%\": \"#87d068\",\n                          },\n                          strokeWidth: 4,\n                          format: (percent) =>\n                            `${parseFloat(percent.toFixed(1))}%`,\n                        }}\n                        onRemove={(e) => {\n                          setUplodedList([]);\n                        }}\n                        // onRemove={(e) => {\n                        //   console.log(e);\n\n                        //   enstance\n                        //     .post(\n                        //       \"/deleteMedia\",\n                        //       {\n                        //         model: \"User\",\n                        //         modelID: e.uid,\n                        //       },\n                        //       {\n                        //         headers: {\n                        //           // Authorization: `Bearer ${token}`,\n                        //         },\n                        //       }\n                        //     )\n                        //     .then((res) => {\n                        //       message.success(\n                        //         getLang() && getLang() == \"ar\"\n                        //           ? \"تم المسح بنجاح\"\n                        //           : \"Deleted successfully\"\n                        //       );\n                        //       setFileListEn([]);\n                        //     })\n                        //     .catch((err) => {\n                        //       if (\n                        //         err.response &&\n                        //         err.response.data &&\n                        //         err.response.data.message\n                        //       ) {\n                        //         const text = err.response.data.message;\n                        //         message.error(text);\n                        //       }\n                        //     });\n                        // }}\n                        style={{\n                          display: \"inline-flex\",\n                          marginBottom: \"10px\",\n                          opacity: uplodedList.length >= 1 ? \"50%\" : \"100%\",\n                          pointerEvents:\n                            uplodedList.length >= 1 ? \"none\" : \"auto\",\n                        }}\n                      >\n                        <p className=\"ant-upload-drag-icon\">\n                          <InboxOutlined style={{ color: \"#1b5b7e\" }} />\n                        </p>\n                        <p className=\"ant-upload-text\">\n                          <IntlMessages id=\"upload_image\" />\n                        </p>\n                        <p className=\"ant-upload-hint\"></p>\n                      </Dragger>\n\n                      {cat?.image && (\n                        <div\n                          style={{\n                            width: \"fit-content\",\n                            border: \"1px solid #c4c1c1\",\n                            padding: \"10px\",\n                            alignItems: \"center\",\n                            display: \"flex\",\n                          }}\n                        >\n                          <Image width={100} height={100} src={cat?.image} />\n                        </div>\n                      )} */}\n\n\n                      <Form.Item>\n                        <div\n                          style={{\n                            display: \"block\",\n                            marginTop: \"1.2rem\",\n                            textAlign: \"center\",\n                          }}\n                        >\n                          <CustomButton\n                            styles={{ padding: \".7rem 4rem\" }}\n                            type=\"submit\"\n                          >\n                            {isSubmiting && <Loader />}\n                            <span>\n                              {\" \"}\n                              {params.id ? (\n                                <IntlMessages id=\"global.submit\" />\n                              ) : (\n                                <IntlMessages id=\"global.submit\" />\n                              )}{\" \"}\n                            </span>\n                          </CustomButton>\n                          <CustomButton\n                            type=\"button\"\n                            handleClick={() => {\n                              history.push(config.routes.index);\n                            }}\n                            styles={cancleButton}\n                          >\n                            <IntlMessages id=\"global.cancel\" />\n                          </CustomButton>\n                        </div>\n                      </Form.Item>\n                    </Form>\n                  </Col>\n                </Row>\n              )}\n            </CardWraper>\n          </Col>\n        </Row>\n      </div>\n    </PageWraper>\n  );\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  border: \"1px solid #02a79f \",\n  borderRadius: \"0.4rem\",\n};\n\nconst cancleButton = {\n  background: \"white\",\n  color: \"#02a79f \",\n  padding: \".7rem 3rem\",\n  border: \"1px solid #02a79f \",\n  marginLeft: \"1rem\",\n};\n\nexport default NewCountry;\n"],"sourceRoot":""}