{"version":3,"sources":["components/new/CardWraper/index.jsx","components/new/PageWraper/index.jsx","../node_modules/antd/es/row/style/css.js","../node_modules/antd/es/col/style/css.js","containers/Patients/config.js","containers/Patients/add.jsx"],"names":["CardWraper","Styled","div","PageWraper","styled","pages","index","add","edit","show","config","api","method","params","delete","routes","privateSub","path","indexTitle","replace","indexKey","slice","length","titles","Option","cancleButton","background","color","padding","border","marginLeft","Form","create","name","props","useState","isSubmiting","setSubmiting","history","useHistory","cat","setCat","loading","setLoading","form","getFieldDecorator","validateFields","resetFields","useParams","dispatch","useDispatch","cities","setCities","countries","setCountries","areas","setAreas","doctors","setDoctors","getLang","localStorage","getItem","useEffect","type","payload","key","to","title","id","enstance","headers","then","res","getCities","data","country_id","getAreas","city_id","get","cityId","className","span","style","marginTop","onSubmit","e","preventDefault","err","values","date_of_birth","moment","format","toast","promise","pending","success","render","push","message","icon","error","response","layout","Item","label","hasFeedback","initialValue","rules","required","size","gender","optionFilterProp","allowClear","value","national_id","width","phone","email","doctor_id","showSearch","map","doctor","onChange","country","name_ar","name_en","disabled","city","area_id","area","notes","TextArea","display","textAlign","styles","handleClick"],"mappings":"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","file":"static/js/24.4a896eff.chunk.js","sourcesContent":["import Styled from \"styled-components\";\n\nconst CardWraper = Styled.div`\n    width: 100%;\n    box-shadow: 0px 2px 6px #0000000A;\n    border-radius: 13px;\n    background: #FFFFFF 0% 0% no-repeat padding-box; \n    padding : 1rem 2rem;\n    height: 100%;\n \n    overflow: hidden ;\n`;\nexport default CardWraper;\n","import styled from \"styled-components\";\n\nconst PageWraper = styled.div`\n  padding: 1rem;\n`;\n\nexport default PageWraper;\n","import '../../style/default.css'; // style dependencies\n// deps-lint-skip: grid\n\nimport '../../grid/style/css';","import '../../style/default.css'; // style dependencies\n// deps-lint-skip: grid\n\nimport '../../grid/style/css';","import { routes } from \"../Dashboard/DashboardRoutes\";\nimport { privateSub } from \"../../router\";\n\nconst pages = {\n  index: \"Patients\",\n  add: \"PatientsNew\",\n  edit: \"PatientsEdit\",\n  show: \"PatientsShow\",\n};\nconst config = {\n  api: {\n    index: [{ method: \"get\", params: {} }, \"patients\"],\n    add: [{ method: \"post\", params: {} }, \"patients\"],\n    edit: [{ method: \"put\", params: {} }, \"patients/\"],\n    show: [{ method: \"get\", params: {} }, \"patients/\"],\n    delete: [{ method: \"delete\", params: {} }, \"patients/\"],\n  },\n  routes: {\n    index: `${privateSub}/${routes[pages.index]?.path}`,\n    indexTitle: pages.index.replace(/([a-z])([A-Z])/g, \"$1 $2\"),\n    indexKey: \"home\",\n    add: `${privateSub}/${routes[pages.add]?.path}`,\n    edit: `${privateSub}/${routes[pages.edit]?.path.slice(\n      0,\n      routes[pages.edit].path.length - 3\n    )}`,\n    show: `${privateSub}/${routes[pages.show]?.path.slice(\n      0,\n      routes[pages.show]?.path.length - 3\n    )}`,\n  },\n  titles: {\n    add: \"Create\",\n    edit: \"global.edit\",\n    show: \"Details\",\n  },\n};\nexport const isActive = {\n  1: \"active\",\n  0: \"not active\",\n};\nexport default config;\n","import React, { useState, useEffect } from \"react\";\nimport { Form } from \"@ant-design/compatible\";\nimport \"@ant-design/compatible/assets/index.css\";\nimport { Select, Row, Input, Col, notification } from \"antd\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport CardWraper from \"../../components/new/CardWraper\";\nimport PageWraper from \"../../components/new/PageWraper\";\nimport CustomButton from \"../../components/new/CustomButton\";\nimport Loader from \"../../components/new/loader\";\nimport enstance from \"../../library/helpers/axios\";\nimport { useDispatch } from \"react-redux\";\nimport IntlMessages from \"@iso/components/utility/intlMessages\";\nimport config,{weekDays} from \"./config\";\nimport { toast } from \"react-toastify\";\nimport { DatePicker } from 'antd';\nimport moment from 'moment';\nconst { Option } = Select;\nconst NewCountry = (props) => {\n  const [isSubmiting, setSubmiting] = useState(false);\n  const history = useHistory();\n  const [cat, setCat] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { getFieldDecorator, resetFields, validateFields } = props.form;\n  const params = useParams();\n  const dispatch = useDispatch();\n  const [cities, setCities] = useState(null);\n  const [countries, setCountries] = useState(null);\n  const [areas, setAreas] = useState(null);\n  const [doctors, setDoctors] = useState(null);\n\n  const getLang = localStorage.getItem(\"lang\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    validateFields((err, values) => {\n        values.date_of_birth = moment(values.date_of_birth).format(\"YYYY-MM-DD\");\n\n      if (!err) {\n setSubmiting(true);\n toast.promise(\n  enstance[\n          cat ? config?.api?.edit?.[0]?.method : config?.api?.add?.[0]?.method\n        ](\n          cat\n            ? `${config?.api?.edit?.[1]}${params?.id}`\n            : config?.api?.add?.[1],\n          values,\n          {\n            headers: {},\n          }\n        )\n,\n{\n        pending: \"Pending\",\n        success: {\n          render(res) {\n            setSubmiting(false);\n               history.push(config.routes.index); \n            return `👌 ${res.data.data.message}`;\n          },\n          // other options\n          icon: \"🟢\",\n        },\n        error: {\n          render(err) {\n             setSubmiting(false);\n            return `🤯 ${\n              err?.data?.response?.data?.message || \"Backend Error Occured\"\n            }`;\n          },\n          // other options\n          //    icon: \"🟢\",\n        },\n      }\n    );\n\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch({\n      type: \"SET\",\n      payload: [\n        {\n          key: config.routes.indexKey,\n          to: config.routes.index,\n          title: config.routes.indexTitle,\n        },\n        {\n          key: params.id ? config.titles.edit : config.titles.add,\n          to: params.id ? `${config.routes.edit}${params.id}` : config.routes.add,\n          title: params.id ? config.titles.edit : config.titles.add,\n        },\n      ],\n    });\n    if (params.id) {\n      setLoading(true);\n      enstance[config?.api?.show?.[0]?.method](\n        `${config?.api?.show?.[1]}${params.id}`,\n        {\n          headers: {},\n        }\n      ).then((res) => {\n        getCities(res.data.data.country_id)\n        getAreas(res.data.data.city_id)\n\n        setCat(res.data.data);\n        setLoading(false);\n\n      });\n    }\n  }, []);\n\n  const getCities = (country_id) => {\n    props.form.resetFields(\"city_id\");\n    const params = {};\n    if (country_id) {\n      params.country_id = country_id;\n    }\n    enstance\n      .get(`cities`, {\n        headers: {},\n        params,\n      })\n      .then((res) => {\n        setCities(res.data.data);\n      });\n  };\n  const getAreas = (cityId) => {\n    props.form.resetFields(\"area_id\");\n    const params = {};\n    if (cityId) {\n      params.city_id = cityId;\n    }\n    enstance\n      .get(`areas`, {\n        headers: {},\n        params,\n      })\n      .then((res) => {\n        setAreas(res.data.data);\n      });\n  };\n\n  useEffect(() => {\n    enstance\n      .get(`countries`, {\n        headers: {},\n      })\n      .then((res) => {\n        setCountries(res.data.data);\n      });\n      enstance\n      .get(`doctors`, {\n        headers: {},\n      })\n      .then((res) => {\n        setDoctors(res.data.data);\n      });\n  }, []);\n\n  return (\n    <PageWraper>\n      <div className=\"new_user_container\">\n        <Row>\n          <Col span={24} style={{ marginTop: \"1rem\" }}>\n            <CardWraper>\n              {loading ? (\n                <Loader />\n              ) : (\n                <Row>\n                  <Col span={24}>\n                    <Form\n                      onSubmit={handleSubmit}\n                      layout=\"vertical\"\n                      className=\"login-form\"\n                    >\n                      <Form.Item\n                        label={<IntlMessages id=\"name\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"name\", {\n                          initialValue: cat ? cat.name : \"\",\n                          rules: [\n                            {\n                              required: true,\n                              message: <IntlMessages id=\"name\" />,\n                            },\n                          ],\n                        })(<Input type=\"text\" size=\"large\" />)}\n                      </Form.Item>\n                      <Form.Item\n                        label={<IntlMessages id=\"gender\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"gender\", {\n                          initialValue: cat ? cat?.gender :'',\n                          rules: [\n                            {\n                              required: true,\n                              message: (\n                                <IntlMessages id=\"sidebar.provenances\" />\n                              ),\n                            },\n                          ],\n                        })(\n                          <Select\n                            optionFilterProp=\"children\"\n                            size=\"large\"\n                            allowClear\n                          >\n                              <Option value={1}> Male </Option>\n                              <Option value={2}> Female </Option>\n                          </Select>\n                        )}\n                      </Form.Item>\n                      <Form.Item\n                        label={<IntlMessages id=\"national\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"national_id\", {\n                          initialValue: cat ? cat.national_id : \"\",\n                          rules: [\n                            {\n                              required: true,\n                              message: <IntlMessages id=\"national\" />,\n                            },\n                          ],\n                        })(<Input type=\"text\" size=\"large\" />)}\n                      </Form.Item>\n                      \n\n                      <Form.Item\n                        label={<IntlMessages id=\"date_of_birth\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"date_of_birth\", {\n                          initialValue: cat ? moment(cat.date_of_birth,'YYYY-MM-DD' ): \"\",\n                          rules: [\n                            {\n                              required: true,\n                              message: <IntlMessages id=\"date_of_birth\" />,\n                            },\n                          ],\n                        })(<DatePicker  format={'YYYY-MM-DD'} size=\"large\" style={{width:'100%'}}  />)}\n                      </Form.Item>\n                      <Form.Item\n                        label={<IntlMessages id=\"phone\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"phone\", {\n                          initialValue: cat ? cat.phone : \"\",\n                          rules: [\n                            {\n                              required: true,\n                              message: <IntlMessages id=\"phone\" />,\n                            },\n                          ],\n                        })(<Input type=\"text\" size=\"large\" />)}\n                      </Form.Item>\n                      <Form.Item\n                        label={<IntlMessages id=\"email\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"email\", {\n                          initialValue: cat ? cat.email : \"\",\n                          rules: [\n                          \n                          ],\n                        })(<Input type=\"text\" size=\"large\" />)}\n                      </Form.Item>\n\n                      <Form.Item\n                        label={<IntlMessages id=\"Doctor\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"doctor_id\", {\n                          initialValue: cat ? cat?.doctor_id : \"\",\n                          rules: [\n                          \n                          ],\n                        })(\n                          <Select\n                            showSearch\n                            optionFilterProp=\"children\"\n                            size=\"large\"\n                            allowClear\n                          >\n                            {doctors?.map((doctor) => (\n                              <Option value={doctor.id}>\n                                {getLang == \"ar\"\n                                  ? doctor?.name\n                                  : doctor?.name}\n                              </Option>\n                            ))}\n                          </Select>\n                        )}\n                      </Form.Item>\n\n                      <Form.Item\n                        label={<IntlMessages id=\"sidebar.provenances\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"country_id\", {\n                          initialValue: cat ? cat?.country_id : \"\",\n                          rules: [\n                         \n                          ],\n                        })(\n                          <Select\n                            showSearch\n                            onChange={(e) => getCities(e)}\n                            optionFilterProp=\"children\"\n                            size=\"large\"\n                            allowClear\n                          >\n                            {countries?.map((country) => (\n                              <Option value={country.id}>\n                                {getLang == \"ar\"\n                                  ? country?.name_ar\n                                  : country?.name_en}\n                              </Option>\n                            ))}\n                          </Select>\n                        )}\n                      </Form.Item>\n\n                      <Form.Item label={<IntlMessages id=\"City\" />} hasFeedback>\n                        {getFieldDecorator(\"city_id\", {\n                          initialValue: cat ? cat?.city_id : \"\",\n                          rules: [\n                          \n                          ],\n                        })(\n                          <Select\n                            disabled={cities ? false : true}\n                            showSearch\n                            optionFilterProp=\"children\"\n                            onChange={(e) => getAreas(e)}\n\n                            size=\"large\"\n                            allowClear\n                          >\n                            {cities?.map((city) => (\n                              <Option value={city.id}>\n                                {getLang == \"ar\"\n                                  ? city?.name_ar\n                                  : city?.name_en}\n                              </Option>\n                            ))}\n                          </Select>\n                        )}\n                      </Form.Item>\n\n                      <Form.Item label={<IntlMessages id=\"area_id\" />} hasFeedback>\n                        {getFieldDecorator(\"area_id\", {\n                          initialValue: cat ? cat?.area_id : \"\",\n                          rules: [\n                         \n                          ],\n                        })(\n                          <Select\n                            disabled={areas ? false : true}\n                            showSearch\n                            optionFilterProp=\"children\"\n                            size=\"large\"\n                            allowClear\n                          >\n                            {areas?.map((area) => (\n                              <Option value={area.id}>\n                                {getLang == \"ar\"\n                                  ? area?.name_ar\n                                  : area?.name_en}\n                              </Option>\n                            ))}\n                          </Select>\n                        )}\n                      </Form.Item>\n\n\n              \n                      <Form.Item\n                        label={<IntlMessages id=\"notes\" />}\n                        hasFeedback\n                      >\n                        {getFieldDecorator(\"notes\", {\n                          initialValue: cat ? cat.notes : \"\",\n                          rules: [\n                         \n                          ],\n                        })(<Input.TextArea type=\"text\" size=\"large\" />)}\n                      </Form.Item>\n\n\n\n                      <div\n                        style={{\n                          display: \"block\",\n                          marginTop: \"1.2rem\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        <CustomButton\n                          styles={{ padding: \".7rem 4rem\" }}\n                          type=\"submit\"\n                        >\n                          {isSubmiting && <Loader />}\n                          <span>\n                            {\" \"}\n                            {params.id ? (\n                              <IntlMessages id=\"global.submit\" />\n                            ) : (\n                              <IntlMessages id=\"global.submit\" />\n                            )}{\" \"}\n                          </span>\n                        </CustomButton>\n                        <CustomButton\n                          type=\"button\"\n                          handleClick={() => {\n                            history.push(config.routes.index);\n                          }}\n                          styles={cancleButton}\n                        >\n                          <IntlMessages id=\"global.cancel\" />\n                        </CustomButton>\n                      </div>\n                    </Form>\n                  </Col>\n                </Row>\n              )}\n            </CardWraper>\n          </Col>\n        </Row>\n      </div>\n    </PageWraper>\n  );\n};\n\nconst inputStyle = {\n  width: \"100%\",\n  border: \"1px solid #1b5b7e\",\n  borderRadius: \"0.4rem\",\n};\n\nconst cancleButton = {\n  background: \"white\",\n  color: \"#1b5b7e\",\n  padding: \".7rem 3rem\",\n  border: \"1px solid #1b5b7e\",\n  marginLeft: \"1rem\",\n};\n\nexport default Form.create({ name: \"new-country\" })(NewCountry);\n"],"sourceRoot":""}